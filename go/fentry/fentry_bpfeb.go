// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package fentry

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadFentry returns the embedded CollectionSpec for fentry.
func loadFentry() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FentryBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load fentry: %w", err)
	}

	return spec, err
}

// loadFentryObjects loads fentry and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*fentryObjects
//	*fentryPrograms
//	*fentryMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFentryObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFentry()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// fentrySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fentrySpecs struct {
	fentryProgramSpecs
	fentryMapSpecs
}

// fentrySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fentryProgramSpecs struct {
	TcpConnect *ebpf.ProgramSpec `ebpf:"tcp_connect"`
}

// fentryMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fentryMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// fentryObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFentryObjects or ebpf.CollectionSpec.LoadAndAssign.
type fentryObjects struct {
	fentryPrograms
	fentryMaps
}

func (o *fentryObjects) Close() error {
	return _FentryClose(
		&o.fentryPrograms,
		&o.fentryMaps,
	)
}

// fentryMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFentryObjects or ebpf.CollectionSpec.LoadAndAssign.
type fentryMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *fentryMaps) Close() error {
	return _FentryClose(
		m.Events,
	)
}

// fentryPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFentryObjects or ebpf.CollectionSpec.LoadAndAssign.
type fentryPrograms struct {
	TcpConnect *ebpf.Program `ebpf:"tcp_connect"`
}

func (p *fentryPrograms) Close() error {
	return _FentryClose(
		p.TcpConnect,
	)
}

func _FentryClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed fentry_bpfeb.o
var _FentryBytes []byte
